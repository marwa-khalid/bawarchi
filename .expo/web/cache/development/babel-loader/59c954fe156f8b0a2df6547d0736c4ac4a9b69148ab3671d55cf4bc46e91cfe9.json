{"ast":null,"code":"import { useRef } from 'react';\nimport { useSharedValue } from \"./useSharedValue\";\nimport { getTag } from \"../NativeMethods\";\nimport { getShadowNodeWrapperFromHostInstance } from \"../fabricUtils\";\nimport { makeShareableCloneRecursive, registerShareableMapping } from \"../shareables\";\nfunction getShareableShadowNodeFromComponent(component) {\n  return getShadowNodeWrapperFromHostInstance(component);\n}\nvar getTagValueFunction = global._IS_FABRIC ? getShareableShadowNodeFromComponent : getTag;\nexport function useAnimatedRef() {\n  var tag = useSharedValue(-1);\n  var ref = useRef();\n  if (!ref.current) {\n    var fun = function fun(component) {\n      if (component) {\n        tag.value = getTagValueFunction(component);\n        fun.current = component;\n      }\n      return tag.value;\n    };\n    fun.current = null;\n    var remoteRef = makeShareableCloneRecursive({\n      __init: function __init() {\n        'worklet';\n\n        return function () {\n          return tag.value;\n        };\n      }\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n  return ref.current;\n}","map":{"version":3,"names":["useRef","useSharedValue","getTag","getShadowNodeWrapperFromHostInstance","makeShareableCloneRecursive","registerShareableMapping","getShareableShadowNodeFromComponent","component","getTagValueFunction","global","_IS_FABRIC","useAnimatedRef","tag","ref","current","fun","value","remoteRef","__init"],"sources":["C:\\Users\\marwa\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useAnimatedRef.ts"],"sourcesContent":["import { Component, useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport { RefObjectFunction } from './commonTypes';\nimport { ShadowNodeWrapper } from '../commonTypes';\nimport { getTag } from '../NativeMethods';\nimport { getShadowNodeWrapperFromHostInstance } from '../fabricUtils';\nimport {\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from '../shareables';\n\nfunction getShareableShadowNodeFromComponent(\n  component: Component\n): ShadowNodeWrapper {\n  return getShadowNodeWrapperFromHostInstance(component);\n}\n\nconst getTagValueFunction = global._IS_FABRIC\n  ? getShareableShadowNodeFromComponent\n  : getTag;\n\nexport function useAnimatedRef<T extends Component>(): RefObjectFunction<T> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const ref = useRef<RefObjectFunction<T>>();\n\n  if (!ref.current) {\n    const fun: RefObjectFunction<T> = <RefObjectFunction<T>>((component) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = getTagValueFunction(component);\n        fun.current = component;\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const remoteRef = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        return () => tag.value;\n      },\n    });\n    registerShareableMapping(fun, remoteRef);\n\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"],"mappings":"AAAA,SAAoBA,MAAM,QAAQ,OAAO;AACzC,SAASC,cAAc;AAGvB,SAASC,MAAM;AACf,SAASC,oCAAoC;AAC7C,SACEC,2BAA2B,EAC3BC,wBAAwB;AAG1B,SAASC,mCAAmCA,CAC1CC,SAAoB,EACD;EACnB,OAAOJ,oCAAoC,CAACI,SAAS,CAAC;AACxD;AAEA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,UAAU,GACzCJ,mCAAmC,GACnCJ,MAAM;AAEV,OAAO,SAASS,cAAcA,CAAA,EAA8C;EAC1E,IAAMC,GAAG,GAAGX,cAAc,CAAoC,CAAC,CAAC,CAAC;EACjE,IAAMY,GAAG,GAAGb,MAAM,EAAwB;EAE1C,IAAI,CAACa,GAAG,CAACC,OAAO,EAAE;IAChB,IAAMC,GAAyB,GAA2B,SAApDA,GAAyBA,CAA2BR,SAAS,EAAK;MAEtE,IAAIA,SAAS,EAAE;QACbK,GAAG,CAACI,KAAK,GAAGR,mBAAmB,CAACD,SAAS,CAAC;QAC1CQ,GAAG,CAACD,OAAO,GAAGP,SAAS;MACzB;MACA,OAAOK,GAAG,CAACI,KAAK;IAClB,CAAE;IAEFD,GAAG,CAACD,OAAO,GAAG,IAAI;IAElB,IAAMG,SAAS,GAAGb,2BAA2B,CAAC;MAC5Cc,MAAM,EAAE,SAAAA,OAAA,EAAM;QACZ,SAAS;;QACT,OAAO;UAAA,OAAMN,GAAG,CAACI,KAAK;QAAA;MACxB;IACF,CAAC,CAAC;IACFX,wBAAwB,CAACU,GAAG,EAAEE,SAAS,CAAC;IAExCJ,GAAG,CAACC,OAAO,GAAGC,GAAG;EACnB;EAEA,OAAOF,GAAG,CAACC,OAAO;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
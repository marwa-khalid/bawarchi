{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ReactNativeExceptionHandler = NativeModules.ReactNativeExceptionHandler;\nvar noop = function noop() {};\nexport var setJSExceptionHandler = function setJSExceptionHandler() {\n  var customHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  var allowedInDevMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (typeof allowedInDevMode !== \"boolean\" || typeof customHandler !== \"function\") {\n    console.log(\"setJSExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the JS handler .. please fix setJSExceptionHandler call\");\n    return;\n  }\n  var allowed = allowedInDevMode ? true : !__DEV__;\n  if (allowed) {\n    global.ErrorUtils.setGlobalHandler(customHandler);\n    var consoleError = console.error;\n    console.error = function () {\n      var _global$ErrorUtils;\n      (_global$ErrorUtils = global.ErrorUtils).reportError.apply(_global$ErrorUtils, arguments);\n      consoleError.apply(void 0, arguments);\n    };\n  } else {\n    console.log(\"Skipping setJSExceptionHandler: Reason: In DEV mode and allowedInDevMode = false\");\n  }\n};\nexport var getJSExceptionHandler = function getJSExceptionHandler() {\n  return global.ErrorUtils.getGlobalHandler();\n};\nexport var setNativeExceptionHandler = function setNativeExceptionHandler() {\n  var customErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  var forceApplicationToQuit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var executeDefaultHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (typeof customErrorHandler !== \"function\" || typeof forceApplicationToQuit !== \"boolean\") {\n    console.log(\"setNativeExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the native handler .. please fix setNativeExceptionHandler call\");\n    return;\n  }\n  if (Platform.OS === \"ios\") {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, customErrorHandler);\n  } else {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, forceApplicationToQuit, customErrorHandler);\n  }\n};\nexport default {\n  setJSExceptionHandler: setJSExceptionHandler,\n  getJSExceptionHandler: getJSExceptionHandler,\n  setNativeExceptionHandler: setNativeExceptionHandler\n};","map":{"version":3,"names":["ReactNativeExceptionHandler","NativeModules","noop","setJSExceptionHandler","customHandler","arguments","length","undefined","allowedInDevMode","console","log","allowed","__DEV__","global","ErrorUtils","setGlobalHandler","consoleError","error","_global$ErrorUtils","reportError","apply","getJSExceptionHandler","getGlobalHandler","setNativeExceptionHandler","customErrorHandler","forceApplicationToQuit","executeDefaultHandler","Platform","OS","setHandlerforNativeException"],"sources":["C:/Users/marwa/Desktop/akki/Bawarchi/node_modules/react-native-exception-handler/index.js"],"sourcesContent":["import { NativeModules, Platform } from \"react-native\";\n\nconst { ReactNativeExceptionHandler } = NativeModules;\n\nconst noop = () => { };\n\nexport const setJSExceptionHandler = (customHandler = noop, allowedInDevMode = false) => {\n  if (typeof allowedInDevMode !== \"boolean\" || typeof customHandler !== \"function\") {\n    console.log(\"setJSExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the JS handler .. please fix setJSExceptionHandler call\");\n    return;\n  }\n  const allowed = allowedInDevMode ? true : !__DEV__;\n  if (allowed) {\n    global.ErrorUtils.setGlobalHandler(customHandler);\n    const consoleError = console.error;\n    console.error = (...args) => {\n      global.ErrorUtils.reportError(...args);\n      consoleError(...args);\n    };\n  } else {\n    console.log(\"Skipping setJSExceptionHandler: Reason: In DEV mode and allowedInDevMode = false\");\n  }\n};\n\nexport const getJSExceptionHandler = () => global.ErrorUtils.getGlobalHandler();\n\nexport const setNativeExceptionHandler = (customErrorHandler = noop, forceApplicationToQuit = true, executeDefaultHandler = false) => {\n  if (typeof customErrorHandler !== \"function\" || typeof forceApplicationToQuit !== \"boolean\") {\n    console.log(\"setNativeExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the native handler .. please fix setNativeExceptionHandler call\");\n    return;\n  }\n  if (Platform.OS === \"ios\") {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, customErrorHandler);\n  } else {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, forceApplicationToQuit, customErrorHandler);\n  }\n};\n\nexport default {\n  setJSExceptionHandler,\n  getJSExceptionHandler,\n  setNativeExceptionHandler\n};\n"],"mappings":";;AAEA,IAAQA,2BAA2B,GAAKC,aAAa,CAA7CD,2BAA2B;AAEnC,IAAME,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS,CAAE,CAAC;AAEtB,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAuD;EAAA,IAAnDC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,IAAI;EAAA,IAAEM,gBAAgB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAClF,IAAI,OAAOG,gBAAgB,KAAK,SAAS,IAAI,OAAOJ,aAAa,KAAK,UAAU,EAAE;IAChFK,OAAO,CAACC,GAAG,CAAC,4JAA4J,CAAC;IACzKD,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;IAClF;EACF;EACA,IAAMC,OAAO,GAAGH,gBAAgB,GAAG,IAAI,GAAG,CAACI,OAAO;EAClD,IAAID,OAAO,EAAE;IACXE,MAAM,CAACC,UAAU,CAACC,gBAAgB,CAACX,aAAa,CAAC;IACjD,IAAMY,YAAY,GAAGP,OAAO,CAACQ,KAAK;IAClCR,OAAO,CAACQ,KAAK,GAAG,YAAa;MAAA,IAAAC,kBAAA;MAC3B,CAAAA,kBAAA,GAAAL,MAAM,CAACC,UAAU,EAACK,WAAW,CAAAC,KAAA,CAAAF,kBAAA,EAAAb,SAAA,CAAS;MACtCW,YAAY,CAAAI,KAAA,SAAAf,SAAA,CAAS;IACvB,CAAC;EACH,CAAC,MAAM;IACLI,OAAO,CAACC,GAAG,CAAC,kFAAkF,CAAC;EACjG;AACF,CAAC;AAED,OAAO,IAAMW,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAASR,MAAM,CAACC,UAAU,CAACQ,gBAAgB,EAAE;AAAA;AAE/E,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAA,EAAgG;EAAA,IAA5FC,kBAAkB,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,IAAI;EAAA,IAAEuB,sBAAsB,GAAApB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEqB,qBAAqB,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC/H,IAAI,OAAOmB,kBAAkB,KAAK,UAAU,IAAI,OAAOC,sBAAsB,KAAK,SAAS,EAAE;IAC3FhB,OAAO,CAACC,GAAG,CAAC,gKAAgK,CAAC;IAC7KD,OAAO,CAACC,GAAG,CAAC,6EAA6E,CAAC;IAC1F;EACF;EACA,IAAIiB,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IACzB5B,2BAA2B,CAAC6B,4BAA4B,CAACH,qBAAqB,EAAEF,kBAAkB,CAAC;EACrG,CAAC,MAAM;IACLxB,2BAA2B,CAAC6B,4BAA4B,CAACH,qBAAqB,EAAED,sBAAsB,EAAED,kBAAkB,CAAC;EAC7H;AACF,CAAC;AAED,eAAe;EACbrB,qBAAqB,EAArBA,qBAAqB;EACrBkB,qBAAqB,EAArBA,qBAAqB;EACrBE,yBAAyB,EAAzBA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}